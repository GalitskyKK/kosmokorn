import React, { useState } from "react"
import { motion } from "framer-motion"
import { IUserData, IAppState } from "@/types"
import { APP_VERSION, ACHIEVEMENTS } from "@/constants"
import { storage } from "@/services/storageService"
// import { formatNumber } from '@/utils' // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
import Button from "@/components/ui/Button"
import Card, { CardHeader, CardTitle, CardContent, CardFooter } from "@/components/ui/Card"

interface ISettingsScreenProps {
  userData: IUserData | null
  onNavigate: (view: IAppState["currentView"]) => void
  onReset: () => void
  onSettingsUpdate: (settings: IUserData["settings"]) => void
  currentStreak: number
}

/**
 * –≠–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const SettingsScreen: React.FC<ISettingsScreenProps> = ({
  userData,
  onNavigate,
  onReset,
  onSettingsUpdate,
  currentStreak
}) => {
  const [showResetConfirm, setShowResetConfirm] = useState<boolean>(false)
  const [showExportData, setShowExportData] = useState<boolean>(false)

  if (!userData) {
    return null
  }

  const handleSettingChange = (key: keyof IUserData["settings"], value: any): void => {
    const newSettings = { ...userData.settings, [key]: value }
    onSettingsUpdate(newSettings)
  }

  const handleExportData = (): void => {
    const exportedData = storage.export()
    if (exportedData) {
      const blob = new Blob([exportedData], { type: "application/json" })
      const url = URL.createObjectURL(blob)
      const a = document.createElement("a")
      a.href = url
      a.download = `kosmokorn-${userData.planetName}-${new Date().toISOString().split("T")[0]}.json`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
      setShowExportData(false)
    }
  }

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        duration: 0.5,
        staggerChildren: 0.1
      }
    }
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  }

  const ToggleSwitch: React.FC<{
    label: string
    description?: string
    enabled: boolean
    onChange: (enabled: boolean) => void
    disabled?: boolean
  }> = ({ label, description, enabled, onChange, disabled = false }) => (
    <div className="flex items-center justify-between py-3">
      <div className="flex-1">
        <div className="text-white font-medium">{label}</div>
        {description && <div className="text-xs text-gray-400 mt-1">{description}</div>}
      </div>
      <button
        onClick={() => !disabled && onChange(!enabled)}
        disabled={disabled}
        className={`
          relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-800
          ${enabled ? "bg-blue-600" : "bg-gray-600"}
          ${disabled ? "opacity-50 cursor-not-allowed" : "cursor-pointer"}
        `}>
        <span
          className={`
            inline-block h-4 w-4 transform rounded-full bg-white transition-transform
            ${enabled ? "translate-x-6" : "translate-x-1"}
          `}
        />
      </button>
    </div>
  )

  const StatCard: React.FC<{
    title: string
    value: string | number
    icon: string
    subtitle?: string
  }> = ({ title, value, icon, subtitle }) => (
    <div className="bg-gray-800/50 p-4 rounded-lg text-center">
      <div className="text-2xl mb-2">{icon}</div>
      <div className="text-lg font-semibold text-white">{value}</div>
      <div className="text-xs text-gray-400">{title}</div>
      {subtitle && <div className="text-xs text-gray-500 mt-1">{subtitle}</div>}
    </div>
  )

  return (
    <motion.div
      className="min-h-screen-mobile bg-gradient-to-br from-dark-500 via-dark-400 to-dark-300"
      variants={containerVariants}
      initial="hidden"
      animate="visible">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <motion.header
        className="safe-top flex items-center justify-between p-4 bg-black/20 backdrop-blur-sm border-b border-white/10"
        variants={itemVariants}>
        <div className="flex items-center gap-3">
          <Button
            size="sm"
            variant="ghost"
            onClick={() => onNavigate("planet")}
            className="text-white">
            ‚Üê –ù–∞–∑–∞–¥
          </Button>
          <h1 className="text-lg font-semibold text-white">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
        </div>
      </motion.header>

      <div className="flex-1 p-4 space-y-6">
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <motion.div variants={itemVariants}>
          <Card variant="glassmorphism" padding="lg">
            <CardHeader>
              <CardTitle className="text-white text-center">{userData.planetName}</CardTitle>
              <p className="text-center text-gray-300 text-sm">
                –î–µ–Ω—å {userData.currentDay} ‚Ä¢ –í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤: {userData.totalVisits}
              </p>
            </CardHeader>

            <CardContent>
              <div className="grid grid-cols-2 mobile:grid-cols-4 gap-4">
                <StatCard
                  title="–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è"
                  value={currentStreak}
                  icon="üî•"
                  subtitle={currentStreak === 1 ? "–¥–µ–Ω—å" : "–¥–Ω–µ–π"}
                />
                <StatCard
                  title="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
                  value={userData.achievements.length}
                  icon="üèÜ"
                  subtitle="–ø–æ–ª—É—á–µ–Ω–æ"
                />
                <StatCard
                  title="–í–æ–∑—Ä–∞—Å—Ç –ø–ª–∞–Ω–µ—Ç—ã"
                  value={userData.currentDay}
                  icon="üåç"
                  subtitle={userData.currentDay === 1 ? "–¥–µ–Ω—å" : "–¥–Ω–µ–π"}
                />
                <StatCard
                  title="–í—Å–µ–≥–æ –≤–∏–∑–∏—Ç–æ–≤"
                  value={userData.totalVisits}
                  icon="üìÖ"
                  subtitle="—Ä–∞–∑"
                />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
        {userData.achievements.length > 0 && (
          <motion.div variants={itemVariants}>
            <Card variant="glassmorphism" padding="lg">
              <CardHeader>
                <CardTitle className="text-white">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</CardTitle>
                <p className="text-gray-400 text-sm">–í–∞—à–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã</p>
              </CardHeader>

              <CardContent>
                <div className="space-y-3">
                  {userData.achievements.map((achievementId) => {
                    const achievement = ACHIEVEMENTS[achievementId as keyof typeof ACHIEVEMENTS]
                    if (!achievement) return null

                    return (
                      <div
                        key={achievementId}
                        className="flex items-center gap-4 p-3 bg-gray-800/30 rounded-lg">
                        <div className="text-2xl">{achievement.icon}</div>
                        <div>
                          <div className="text-white font-medium">{achievement.name}</div>
                          <div className="text-xs text-gray-400">{achievement.description}</div>
                        </div>
                      </div>
                    )
                  })}
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <motion.div variants={itemVariants}>
          <Card variant="glassmorphism" padding="lg">
            <CardHeader>
              <CardTitle className="text-white">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</CardTitle>
            </CardHeader>

            <CardContent>
              <div className="space-y-4">
                <ToggleSwitch
                  label="–ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã"
                  description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
                  enabled={userData.settings.enableSound}
                  onChange={(enabled) => handleSettingChange("enableSound", enabled)}
                />

                <ToggleSwitch
                  label="–ê–Ω–∏–º–∞—Ü–∏–∏"
                  description="–ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã"
                  enabled={userData.settings.enableAnimations}
                  onChange={(enabled) => handleSettingChange("enableAnimations", enabled)}
                />

                <ToggleSwitch
                  label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                  description="Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö"
                  enabled={userData.settings.notifications}
                  onChange={(enabled) => handleSettingChange("notifications", enabled)}
                />

                {/* –í—ã–±–æ—Ä —Ç–µ–º—ã */}
                <div className="py-3">
                  <div className="text-white font-medium mb-3">–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</div>
                  <div className="flex gap-2">
                    {(["space", "cosmic", "galaxy"] as const).map((theme) => (
                      <button
                        key={theme}
                        onClick={() => handleSettingChange("theme", theme)}
                        className={`
                          px-4 py-2 rounded-lg text-sm font-medium transition-colors capitalize
                          ${
                            userData.settings.theme === theme
                              ? "bg-blue-600 text-white"
                              : "bg-gray-700 text-gray-300 hover:bg-gray-600"
                          }
                        `}>
                        {theme === "space"
                          ? "–ö–æ—Å–º–æ—Å"
                          : theme === "cosmic"
                          ? "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π"
                          : "–ì–∞–ª–∞–∫—Ç–∏–∫–∞"}
                      </button>
                    ))}
                  </div>
                </div>

                {/* –í—ã–±–æ—Ä —è–∑—ã–∫–∞ */}
                <div className="py-3">
                  <div className="text-white font-medium mb-3">–Ø–∑—ã–∫</div>
                  <div className="flex gap-2">
                    {(["ru", "en"] as const).map((lang) => (
                      <button
                        key={lang}
                        onClick={() => handleSettingChange("language", lang)}
                        className={`
                          px-4 py-2 rounded-lg text-sm font-medium transition-colors
                          ${
                            userData.settings.language === lang
                              ? "bg-blue-600 text-white"
                              : "bg-gray-700 text-gray-300 hover:bg-gray-600"
                          }
                        `}>
                        {lang === "ru" ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá∫üá∏ English"}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ */}
        <motion.div variants={itemVariants}>
          <Card variant="glassmorphism" padding="lg">
            <CardHeader>
              <CardTitle className="text-white">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</CardTitle>
              <p className="text-gray-400 text-sm">–≠–∫—Å–ø–æ—Ä—Ç, —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö</p>
            </CardHeader>

            <CardContent>
              <div className="space-y-4">
                <Button
                  fullWidth
                  variant="outline"
                  onClick={() => setShowExportData(true)}
                  className="text-white border-white/30">
                  üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã
                </Button>

                <Button fullWidth variant="danger" onClick={() => setShowResetConfirm(true)}>
                  üóëÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–ª–∞–Ω–µ—Ç—É
                </Button>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ */}
        <motion.div variants={itemVariants}>
          <Card variant="glassmorphism" padding="lg">
            <CardHeader>
              <CardTitle className="text-white">–û KosmoKorn</CardTitle>
            </CardHeader>

            <CardContent>
              <div className="text-center space-y-2">
                <div className="text-4xl">üåç</div>
                <p className="text-white font-medium">KosmoKorn v{APP_VERSION}</p>
                <p className="text-gray-400 text-sm">–í—ã—Ä–∞—â–∏–≤–∞–π —Å–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–ª–∞–Ω–µ—Ç—É</p>
                <p className="text-gray-500 text-xs">–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –∫–æ—Å–º–æ—Å–∞</p>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ */}
      {showResetConfirm && (
        <div className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <motion.div
            className="w-full max-w-md"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}>
            <Card variant="glassmorphism" padding="lg">
              <CardHeader>
                <div className="text-center">
                  <div className="text-4xl mb-4">‚ö†Ô∏è</div>
                  <CardTitle className="text-white">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–ª–∞–Ω–µ—Ç—É?</CardTitle>
                  <p className="text-gray-300 text-sm mt-2">
                    –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–π –ø–ª–∞–Ω–µ—Ç—ã –±—É–¥–µ—Ç —É—Ç–µ—Ä—è–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞.
                  </p>
                </div>
              </CardHeader>

              <CardFooter justify="between">
                <Button variant="ghost" onClick={() => setShowResetConfirm(false)}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button
                  variant="danger"
                  onClick={() => {
                    onReset()
                    setShowResetConfirm(false)
                  }}>
                  –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
                </Button>
              </CardFooter>
            </Card>
          </motion.div>
        </div>
      )}

      {/* –î–∏–∞–ª–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
      {showExportData && (
        <div className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <motion.div
            className="w-full max-w-md"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}>
            <Card variant="glassmorphism" padding="lg">
              <CardHeader>
                <div className="text-center">
                  <div className="text-4xl mb-4">üì§</div>
                  <CardTitle className="text-white">–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç—ã</CardTitle>
                  <p className="text-gray-300 text-sm mt-2">
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –ø–ª–∞–Ω–µ—Ç—ã –≤ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ–±–º–µ–Ω–∞.
                  </p>
                </div>
              </CardHeader>

              <CardFooter justify="between">
                <Button variant="ghost" onClick={() => setShowExportData(false)}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button onClick={handleExportData}>–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª</Button>
              </CardFooter>
            </Card>
          </motion.div>
        </div>
      )}
    </motion.div>
  )
}

export default SettingsScreen
